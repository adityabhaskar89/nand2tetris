// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16(a=false, b=instruction[0..15], sel=instruction[15], out=instructionOut, out[15]=cType, out[12]=cAorM, out[11]=cZX, out[10]=cNX, out[9]=cZY, out[8]=cNy, out[7]=cF, out[6]=cNO, out[5]=cDestA, out[4]=cDestD, out[3]=cDestM, out[3]= writeM, out[2]=cJLT,out[1]=cJEQ, out[0]=cJGT );
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=Ain);
    Not(in=cType, out=notcType);
    Or(a=notcType, b=cDestA, out=loadA);
    Mux16(a=aRegOut, b=inM, sel=cAorM, out=yIn);

    ALU(x=dRegOut, y=yIn, zx=cZX, nx=cNX, zy=cZY, ny=cNy, f=cF, no=cNO, out=aluOut, out=outM, zr=zerop, ng=negp);
    ARegister(in=Ain, load=loadA, out=aRegOut, out[0..14]=addressM);
    DRegister(in=aluOut, load=cDestD, out=dRegOut);

    Not(in=zerop, out=notzerop);
    Not(in=negp, out=notnegp);
    And(a=notzerop, b=notnegp, out=posp);
    And(a=negp, b=cJLT, out=out2);
    And(a=zerop, b=cJEQ, out=out1);
    And(a=posp, b=cJGT, out=out0);
    Or(a=out2, b=out1, out=out3);
    Or(a=out0, b=out3, out=pcload);
    PC(in=aRegOut, load=pcload, inc=true, reset=reset, out=pcout, out[0..14]=pc);   
    
    
    
}
